1. 시큐리티를 사용하기 위해서 사진 1번과 같이 build.gradle에 security 라이브러리를 설치한다.

2. 브라우저에 메인, 회원가입, 로그인 페이지를 띄우기 위해 사진 2번과 같이 BoardController.java를 생성하여 @GetMapping 실행.
    (이때, security를 사용하기 위해서 다른 페이지들과 달리 주소에 /auth를 추가하여 넣어준다.(메인 페이지는 포함하지 않음. /auth로 넘어가게 되는 페이지는 로그인을 하지 않아도 들어갈 수 있는 곳))

    - security를 사용하게 되면 로그인 관련 기능은 자동으로 생성되지만, 회원가입 부분은 직접 만들어야 한다.

3. security를 설정하기 위해 config 패키지 안에 SecurityConfig.java 생성
    @EnableWebSecurity 어노테이션을 불러오지 못하는 문제가 발생하여 찾아보니 환경 변수 설정의 문제라는 것을 발견 (사진 3번)
        이 문제를 해결하기 위해서는 JDK 11 버전을 다운 받아 환경 변수를 "[ JDK 11 설치 경로 ]\bin"을 환경 변수에 등록 하라고 하지만 현재 버전은 18.
        일단 환경 변수의 경로를 변경(사진 4번 -> 사진 5번)

        그럼에도 문제가 해결되지 않아 일단 경로를 원래대로(사진 4번) 수정

4. @EnableWebSecurity 어노테이션의 경우는 build.gradle에 implementation 'org.springframework.boot:spring-boot-starter-security'을 작성하면 된다고 하는데 문제가 계속 발생하여 새로운 파일 생성(프로젝트명 projet)
    새로 만든 프로젝트에서 build.gradle을 설정하니 문제 해결
    기존 프로젝트를 파기하고 새로운 프로젝트에 계속해서 진행.

5. security의 접근을 설정하기 위해 config 패키지 안에 SecurityConfig.java 생성(사진 6번)

    먼저, 1번 박스를 설명하자면
        - @Configuration                                        : bean을 생성한다. 
        - @EnableWebSecurity                                    : security 필터를 등록한다.(spring security가 활성화 되었는데 어떤 설정을 해당 파일에서 하겠다.)
        - @EnableGlobalMethodSecurity(prePostEnabled = true)    : 특정 주소로 접근을 하면 권한 및 인증을 미리 체크하겠다.

        또한, security를 사용하기 위해서는 SecurityFilterChain을 Bean으로 등록해야 한다.
        filterChain() 메서드는 HttpSecurity 데이터 타입의 변수를 파라메터로 사용하고, Exception를 상속받게 된다.
        이때, 받게 되는 http는 .~를 사용하여 필요한 설정을 들고 올 수 있게 된다.

        간단하게 살펴보자면 
            - .csrf().disable()             : csrf 토큰 비활성화(테스트 시 걸어두는게 좋음)
            - .authorizeRequests()          : request가 들어오게 되면 동작.
            - .antMatchers("경로")          : requset로 받아온 경로가 ()의 것과 같을 경우 다음 동작으로 넘김.
            - .permitAll()                  : 접근 허용.(즉, antMatchers로 받아온 경로일 경우에만 접근 허용)
            - .anyRequest()                 : 접근을 허용하지 않는 다른 요청의 경우 다음 동작으로 넘김.
            - .authenticated()              : 접근 허용받지 않은 요청일 경우 인증(로그인)이 되어야 한다.

            - .loginPage("경로")            : 인증이 필요하다면 경로로 이동.
            - .loginProcessingUrl("경로")   : 스프링 시큐리티가 해당 주소로 요청오는 login을 가로채서 대신 로그인해준다.
            - .defaultSuccessUrl("경로")    : 스프링 시큐리티가 login을 끝내고 해당 주소로 이동.
            - .failureUrl("경로")           : login이 실패하게 되면 해당 주소로 이동.

        마지막으로 http의 build를 마치고 return 한다.

    다음으로 2번 박스를 보면 
        security는 로그인 요청을 받게 되면 전송되는 파라메터 중, username과 password를 가로채서 로그인을 진행한다.
        (이때 password 정보는 해시 처리가 되어야만 받아준다.)

        때문에 encodePWD() 메서드를 호출하면 new BCryptPasswordEncoder()를 return 받을 수 있게 만든다.
        (여기서 @Bean을 사용하면 IoC가 된다.(함수가 return 하는 값을 spring이 관리.))

        해시 처리된 password를 받기 위해서는 
