1. 기본적인 흐름을 보자면, 
    html 생성 - controller 동작 - controller에서 동작하기 위한 엔티티 생성 - repositroy에서 JpaRepository 상속 - service에서 기능 구현 - 구현된 기능을 가지고 controller에서 실행
    이라고 할 수 있으며 여기서 dto를 생성하여 controller에서 필요한 데이터를 받아오는 것이 좋다.

2. 먼저, list.html에 맞는 테이블을 생성하기 위해 model 패키지에 Project.java를 생성하여 userNo, userNm, userId, userPw의 필드를 가지게 만든다.(사진 1번)
    생성한 project 모델을 사용하기 위해 repositroy에서 ProjectRepositroy.java를 생성하여 JpaRepository를 상속한다.(사진 2번)

    데이터 베이스에 값을 저장하는 메소드를 만들기 위해 sevice에서 ProjectService.java를 생성하여 @Service 어노테이션을 주고, @Transactional 어노테이션을 사용하여 메서드를 생성한다.
        이때, 생성된 메소들에서 받아오게 될 정보는 '메소드(int id, User user)와 같이 받아올 수 있는데 DTO를 사용하여 받아오는 방법도 존재한다.
            DTO : DTO(Data Transfer Object)는 데이터를 전달하기 위한 객체이다. 
                계층간 데이터를 주고 받을 때, 데이터를 담아서 전달하는 바구니로 생각할 수 있다. 여러 레이어 사이에서 DTO를 사용할 수 있지만, 
                주로 View와 Controller 사이에서 데이터를 주고 받을 때 활용한다.

        때문에 dto 패키지에서 ProjectDto.java를 생성하고 저장에 필요한 내용들을 작성한다. (사진 3번)

3. 순서대로 작성하자면
    3-1. 테이블을 생성한다. 여기서 테이블은 프로젝트에 사용하는 html과 연동되는 것으로 사용하기 위해서 사진 4번과 같이 userNo, userNa, userId, userPw로 구성되게 만든다.

    3-2. list.html에 user의 정보를 작성하고 저장을 눌러 테이블에 데이터를 올리기 위해서 controller를 작성한다.(사진 5번)
        이때, controller는 말 그대로 컨트롤을 위해 존재하는 java 파일로, 메소드(예를 들어 save 동작)을 실행시키도록 작성된다.

    3-3. Dto 파일 생성. 
        Dto란 Data Transfer Object의 약자로, 계층 간 데이터 전송을 위해 도메인 모델 대신 사용되는 객체이다.  
            순수하게 데이터를 저장하고, 데이터에 대한 getter, setter 만을 가져오는 것으로 어떠한 비즈니스 로직을 가져서는 안된다.
            DTO 대신 도메인 모델을 계층간 전달에 사용하면, UI 계층에서 도메인 모델의 메소드를 호출하거나 상태를 변경시킬 수 있다. 
            또한 UI화면마다 사용하는 도메인 모델의 정보는 상이하다. 하지만 도메인 모델은 UI에 필요하지 않은 정보까지 가지고 있다. 
            이런 모든 도메인 모델 속성이 외부에 노출되면 보안 문제가 발생할 수 있다. 즉, 도메인 모델을 캡슐화 하여 보호할 수 있다.

            또한 도메인 모델을 계층간 전송에 사용하면, 모델과 뷰가 강하게 결합될 수 있다. 
            뷰의 요구사항 변화로 도메인의 코드를 변경해야할 일이 생기는 것은 좋지 않다. DTO를 사용하면 이 결합을 느슨하게 만들 수 있다.

            쉽게 말해, Browser, Controller, Service에 넘겨지는 데이터는 Dto를 거쳐 Dto에 정의된 값만 넘기는 것으로 직접적으로 데이터를 넘기는 것과 달리 상태가 변경된 변수를 제거해준다고 말할 수 있겠다.

            때문에 사진 6번을 보면 Dto에서는 단순하게 userNo, userNa, userId, userPw를 받아오도록 되어 있다.
    
    3-4. service 안에 메소드 생성.
        위에서 controller는 메소드를 실행시키는 역할을 한다고 말했다. 그렇다면 controller에서 사용되는 메소드를 만드는 곳은 service라고 할 수 있다.
        사진 7번을 보면 @Transactional 어노테이션을 사용하여 '저장()'이라는 메소드를 생성한 것을 볼 수 있다.
        단순하게 Repositroy.save()를 사용하여 저장하여도 상관 없지만, 사진 7번과 같이 동작시키고 싶은 코드를 직접 작성하여 메소드로 설정해 사용할 수 있다.

        사진 7번에서 나오는 mSave()는 Repositroy에서 생성한 것을 사용한 것이다.(사진 8번)
            mSave()의 경우는 단순하게 userNa, userId, userPw를 가져와 insert하는 코드로 작성되어 있다.
            (여기서는 @Query 어노테이션을 사용하여 직접 동작할 쿼리문을 작성하게 된다.)

        현재 직접 만들어 사용하는 mSave() 메서드가 아닌 기존 Repositroy에 존재하는 save() 메서드를 사용하게 된다면 사진 9번과 같이 save('entity')가 들어가야 한다.
            하지만 저장() 메서드에서 받아는 값은 entity(테이블)가 아닌 Dto이다. 때문에 save()를 사용하기 위해서는 이 Dto를 entity로 변경할 필요가 생긴다.

            즉, entity를 사용하기 위해서는 사진 10번과 같이 Dto 파일에서 테이블이 테이터 타입을 가진 메소드(여기서는 toEntity())를 생성하여 builder()를 활용해 값을 집어 넣어 만든다.
                이렇게 작성하게 되면 사진 11번과 같이 save() 메서드를 사용할 수 있게 된다.

            물론, save()와 같은 메서드를 사용하는 것이 아닌 일반적인 Dto로 사용하기 위해서는 사진 10번의 public ProjectDto(Project entity) 부분과 같이 get~()을 사용하여 값을 받아와 저장해야 한다.

    3-5. 이렇게 entity, repositroy, controller, dto, service를 모두 작성하게 되면 list.html의 axios가 동작하게 되면서 데이터베이스에 값을 저장하게 된다.
        
        여기서 axios의 동작을 간단하게 설명하자면 (사진 12번)
            첫 줄에 나오는 document를 통해 이벤트를 등록시킨다.
                userDtos의 값을 받게 되면 for 구문이 돌아 체크된 user의 userNo가 존재하지 않는다면 post 방식으로 user의 정보를 저장하고, 그렇지 않다면 put 방식으로 user의 정보를 수정하게 된다.
                이때, await의 역할은 비동기 방식의 axios를 잠시 동기 방식으로 전환하는 것으로 값을 받고 저장하는 일련의 과정이 끝날 경우에 '저장되었습니다.'라는 alert를 브라우저에 띄우게 된다.

                모든 과정이 끝나게 되면 다시 두 번째 document를 실행하게 되며 response에 저장된 데이터(user의 정보)가 다시 화면에 띄워질 수 있도록 만든 것이다.

        실제로 spring boot app을 실행해보면 사진 13, 14번과 같이 데이터베이스에 값이 저장되는 것을 볼 수 있다.
        (blog 프로젝트에서는 service.java 파일에서 @RequiredArgsConstructor 어노테이션을 사용하게 된다면 final이 @Autowired를 대체한다고 했지만, 현 프로젝트에서는 동작하지 않는 현상이 발생한다.
        정확히 어떤 부분에서 충돌이 발생하는 것인지 모르겠지만, vscode에서는 final을 사용하여도 에러가 뜨지 않는 것으로 보아 thymeleaf와의 연동에 문제가 있는 것으로 보인다.)

    3-6. 이번에는 데이터베이스에 담긴 user의 정보를 list.html에서 볼 수 있도록 만든다. (사진 15번)
        데이터베이스에서 값을 가져오는 것이므로 @GetMapping을 사용하며 데이터베이스에는 여러 user의 정보가 담겨있기 때문에 그 값은 리스트의 형태로 들고 오게 된다. (때문에 저장할 때와 달리 List를 사용)
        controller의 저장 부분에서는 dto 패키지에서 만든 ResponseDto.java를 이용하여 값을 들어온 상태(200, 500 등등)를 표현하게 했지만, 여기서는 java에 기본적으로 존재하는 ResponseEntity를 활용하여 상태를 받아온다.

        find() 메서드 안에 사용된 @RequestParam 어노테이션은 pring MVC에서 쿼리 스트링 정보를 쉽게 가져오는 역할을 한다.
            예를 들어 /user?name=kwnang에서 "kwang"라는 값을 가져오기 위해서는 사진 16번과 같이 코드를 작성해야한다.

            즉, @RequestParam를 통해 name 변수의 "kwang"라는 문자열을 받아 처리할 수 있는 것이다.
            하지만, @RequestParam를 통해 받아올 name의 필드가 존재하지 않을 경우(다시 말해 /user로 끝나게 될 경우) Bad Request, Required String parameter 'name' is not present 예외가 발생하게 된다.

            이를 해결하기 위해 @RequestParam(required = false) 와 같이 required 속성을 추가하면 해당 필드가 쿼리스트링에 존재하지 않아도 예외가 발생하지 않게 된다.

    3-7. controller에 @GetMapping으로 찾기() 메서드를 동작하도록 작성했으니 service에서 찾기() 메서드를 정의한다.

        ** 문제 발생 - 찾기() 메서드를 생성하는데 sevice에서 어떻게 작성해야 할지 모르겠음(projectRepositroy.java에서 다른 메서드를 생성해야 한다고 생각하는데 어떤 식으로 만들어야 하는지 모르겠음)

            혹시 모를 해결 방안 (사진 19번)
                사진 19번을 보면 ProjectRepositroy.java에서 findBy~()를 만들어 해당 값을 가져오게 작성할 수 있다.(이 부분이 QueryDSL을 뜻하는 것인지 정확히는 모르겠다.)
                이 방식을 사용하여 찾기() 메서드에 사용하면 가능할지도 모르겠다.

    3-8. ProjectController.java에서 @PutMapping을 진행하는데 ok 부분에 문제가 발생(사진 17번)
        이 문제는 ok에 들어갈 파라메터가 return 값을 가지고 있어야 하는데 현재 만들어진 저장() 메서드는 void를 가지고 있다. 
            이를 해결하기 위해서는 사진 18번과 같이 void가 아닌 ProjectDto 데이터 타입으로 받아와 값을 반환해야 한다.

            (지금까지 잘못 사용하고 있던 어노테이션이 존재 : 현재 @~Mapping 을 사용하고 그 아래 @RequestMapping을 진행하였는데 코드 오타이며 @ResponseBody로 변경해야 한다.)

        ProjectService.java에서 void가 아닌 Dto 데이터 타입으로 변환하여 return 값을 반환 받을 수 있게 만들었다면 ok() 메서드가 정상적으로 동작하는 것을 확인할 수 있다.
        (이전에 작성했던 ResponseDto(직접 작성하여 상태를 반환 받는 것) 부분도 문제 없이 동작하는 것을 확인할 수 있다.)

        ** 다만 put 방식이 정상적으로 동작하는 것을 확인하기 위해서는 @GetMapping으로 데이터를 받아와 브라우저에 띄울 수 있어야 하는데 그러질 못하여 수정되는 것이 아닌 새로운 user의 정보가 추가되고 있다.