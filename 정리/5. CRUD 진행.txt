1. CRUD 진행에 앞서 postman을 활용하기 위해 User.java의 role 부분을 수정한다.
    role은 회원 가입을 하게 될 경우, 별 다른 제스처가 없을 경우에는 user를, 관리자가 회원 가입을 하게 된다면 admin을 부여하게 만드는 것이다.

    하지만, 현재 이 기능은 아직 구현하지 못했기 때문에 단순하게 user만을 넣어주도록 만든다.

    실제 회원 가입 기능을 이용하여 회원 가입을 진행하게 된다면 role을 선택하는 부분은 존재하지 않는다.
    때문에 어떤 식으로 회원 가입을 진행한다 하여도 role에는 null이 들어가게 된다.

    따라서 enum을 사용하여 user, admin 중 하나를 받을 수 있게 만들어 준다.(사진 1번)

    enum을 적용시키기 위해서는 model 패키지에 RoleType.java를 생성하여 enum 타입으로 정의하고 user, admin을 작성한다. (사진 2, 3번)

    또한, createDate를 사용하기 위해서 프로젝트를 만들었을 때 기본적으로 생성되는 BaseProjectApplication에 @EnableJpaAuditing 어노테이션을 추가시킨다.(사진 4번)

2. 코드 수정을 완료한 후, postman에서 post 방식으로 username, password, email을 작성하고 send를 하게 되면 회원 가입이 완료되었다는 메시지를 받을 수 있다.(이 메시지는 HelloController.java에서 작성된 내용) (사진 5번)
    여기서 createDate에 null 값이 들어가는 이유는 @EnableJpaAuditing 어노테이션을 추가시키고 User.java에도 @EntityListeners(AuditingEntityListener.class) 어노테이션을 추가해야 하는데 
        이것을 하지 않은 상태로 데이터를 받았기 때문이다. 만약, 어노테이션을 작성한다면 사진 6번과 같이 null이 아닌 회원가입한 시간이 뜨는 것을 확인할 수 있다.

    insert 완료

3. select의 경우는 이전 데이터 베이스의 내용을 가져오는 것이며 추가적으로 한 가지의 user 데이터만 가져오는 것이 아닌 여러 개의 데이터를 들고 오기 위해서는 
    사진 7번과 같이 list로 묶어 userRepositroy.findAll()를 사용하면 된다. 그 결과는 사진 8번과 같이 볼 수 있다.

    이제 데이터 베이스에 내용을 추가시키고(사진 9번) 한 페이지에 띄울 수 있는 정보의 수를 변경할 수 있도록 한다. (사진 10번) (사진 11번도 존재하지만 삭제)
    여기서 getContent()를 사용하여 content 부분만을 반환 데이터 베이스 안의 내용만들 출력할 수 있게 한다. (사진 12번)
    다른 페이지로 넘기기 위해서는 ?page=0을 사용한다.(사진 13번)

    select 완료

4. update의 경우는 @PutMapping으로 데이터 베이스의 정보를 수정하며 update에 사용되는 메핑의 주소("/dummy/user/{id}")와 select에 사용되는 메핑의 주소("dummy/user/{id}")가 같지만
    update는 @PutMapping, select는 @GetMapping을 사용하는 것이기 때문에 서로 다른 주소와 연결되었다고 볼 수 있다. (사진 14번)

        여기서 받아오게 되는 데이터를 json 형식으로 하기 위해 @RequestBody 어노테이션을 사용한다.
        (단순하게 User user의 형식으로 받아오게 된다면 폼태그(x-www-form-urlencoded)로 받아오는 것이고, @RequestBody를 사용하면 raw의 json 형식으로 받아오는 것이다.)

    이제 postman에서 put 방식으로 raw-json으로 수정하고 싶은 내용을 받게 된다면 데이터가 변경되는데 변경된 값을 저장하기 위해서는 user 테이블에 내용을 추가했을 때와 같이 userRepositroy.save(user);를 사용해야한다.
        하지만 save()의 경우는 put 방식으로 받게 된 내용에 관해서만 저장된다. 즉, password를 변경하기 위해 password만 작성했다면 나머지 username, email, role, createDate의 경우는 null 값이 들어간다는 말이다.

        이 문제를 해결하기 위해서는 사진 14번과 같이 user 데이터를 불러오고, 변경하고자 하는 내용(여기서는 password, email)을 set을 사용하여 넣게 된다.
        마지막으로 save()를 사용하면 되는데 save()의 사용 없이도 @Transactional 어노테이션을 사용하면 그 역할을 대신할 수 있게 된다.

    postman으로 확인해보면(사진 15번) 문제없이 동작되는 모습을 확인할 수 있고, 데이터 베이스에서도 값이 변경되어 있는 모습을 확인할 수 있다.(사진 16번)

    update 완료

5. delete의 경우에는 @DeleteMapping을 사용해야한다. 하지만 존재하지 않는 id를 삭제하게 된다면 에러가 발생하기 때문에 try 구문을 사용하여 id가 존재하는 경우에만 삭제를 진행한다.
    (id가 존재하지 않을 경우에는 catch가 작동한다.) (사진 17번)

    이제 postman에서 delete를 실행하게 되면(사진 18번) 데이터 베이스에서 삭제되는 것을 확인할 수 있다.

    delete 완료