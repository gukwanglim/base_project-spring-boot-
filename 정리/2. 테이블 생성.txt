1. jpa를 활용하여 DB의 테이블을 생성하기 위해서 java/com/base/base_project 아래에 model 패키지(폴더)를 생성하여 User.java 를 만든다.(사진 1번)

2. User.java에 적힌 코드가 실행될 때, 자동으로 데이터 베이스 테이블을 생성하기 위해서 @Entity 어노테이션을 사용한다.
    하지만 사진 2번과 같이 javax가 import 안되는 오류가 발생했다.

    이 문제는 build.gradle에 javax에 대한 spring-boot-starter가 설치되이 않아서 발생한 문제로 사진 3번과 같이 코드를 작성하여 저장하면 문제가 해결된다.
    (정확히는 spring-boot-starter-jdbc의 문제처럼 보이지만 구글에 검색해보니 thymeleaf도 추가되어 있는 곳이 있어서 함께 설치했다.)

    작성 완료(사진 4번)

3. 진행에 앞서 사진 5번과 같이 쿼리문을 실행했을 때, 오류가 발생할 수 있다.
    이것은 계정 생성 및 권한 부여를 maridab.user, maridab.db에서 직접 조작을 하였기 때문에 발생한 문제이다.
    (계정 생성 및 권한 부여는 테이블에 직접 접근이 아닌 create와 grant를 이용하는 것을 적극 권장한다.)
    
    때문에 사진 6번과 같이 쿼리문을 실행하여 사용하고자 하는 id를 삭제 후, 다시 create를 실행하면 문제 없이 데이터 베이스가 생성된다.

4. spring boot를 실행하기에 앞서 application.yml에서 수정해야할 부분이 있다.
    사진 8번과 같이 datasource 부분의 url과 username, password를 수정하는데 url의 경우에는 blog가 아닌 현재 만들어 놓은 base로 만들고, username과 password 또한, 위에서 결정한 것으로 변경을 해줘야 한다.

    이렇게해서 spring boot를 실행하게 되면 사진 9번과 같이 데이터 베이스 base 안에 user 테이블이 생성되게 되고, 이 테이블은 User.java에서 작성한 것과 같은 필드를 가지게 된다.(사진 10번)