1. Thymeleaf란 
    '템플릿 엔진'(지정된 템플릿 양식과 데이터가 합쳐져 html 문서를 출력하는 소프트웨어.)의 일종. html 태그에 속성을 추가해 페이지에 동적으로 값을 추가하거나 처리할 수 있다.
    타임리프를 통해 속성을 대체할 수 있는데, 아래 예제를 살펴보자.

        <input type="text" value="test" th:value="${item}"> <!--th:value 타임리프의 문법을 이용해 value 설정-->

    input 태그는 th:value를 통해 item이라는 변수에 값이 존재하면 해당 값을 세팅해준다.
    만약 item이 존재하지 않으면 value="test"를 통해 "test"라는 문자열을 세팅해준다.
    (= th:xxx가 붙은 부분은 서버 사이드에서 렌더링 되어 기존 것을 대체하고, th:xxx이 없으면 xxx 속성이 그대로 사용)

        변수 : ${}
        객체 변수값 : *{}
        메시지 : #{}
        링크 : @{}

    타임리프를 통해 렌더링 된 html 페이지를 열어도 웹 브라우저는 th: 속성을 알지 못한다.

2. Thymeleaf 사용하기
    thymeleaf 뷰 템플릿을 사용하기 위해서는 ThymeleafViewResolver를 등록해야 한다.
    아래 라이브러리를 추가하면 Spring이 위 작업을 자동화 해준다.

    Gradle - build.gradle (사진 2번)
        implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

    Maven - pom.xml
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-thymeleaf</artifactId>
        </dependency>

    위 설정을 추가 후 빌드하면 application.properties에 아래 코드가 자동으로 추가된다. 
    디폴트 설정을 원하지 않는다면 직접 수정해도 된다. (사진 3번)

        spring.thymeleaf.cache=false
        spring.thymeleaf.check-template-location=true
        spring.thymeleaf.prefix=classpath:/templates/
        spring.thymeleaf.suffix=.html

    타임리프를 사용할 html 파일에 다음과 같이 태그를 수정해준다.
        <html xmlns:th="http://www.thymeleaf.org">

3. template 저장 (사진 4번)
    html 파일 상단에 thymeleaf 관련 태그 추가
    <html xmlns.. 로 시작하는 것을 추가합니다.

    css 추가(사진 5번)
        아래의 <link> 태그를 참고하여, style.css 파일과 연동하게 만듭니다.
        js 또한 마찬가지

4. Thymeleaf 문법
    대부분의 html 속성을  th:xxx 로 변경할 수 있다.
        (ex: th:text="${변수명}") (사진 1번)

        소스 코드를 통해 예제를 살펴보고 싶은 경우 아래 레포지토리에서 참고하면 좋을 것 같다.
        상품 서비스의 CRUD를 간단하게 구현하였다.
            링크 : https://github.com/yeon-06/inflearnSpring/tree/master/mvc1-3

    
    출처 : https://yeonyeon.tistory.com/153
    추가적인 사용 방법 : https://sidepower.tistory.com/145, https://aejeong.com/entry/Thymeleaf-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0

5. 직접 Thymeleaf 출력해보기

    - 변수 : ${} 사용하기
        controller 폴더에 TestController.java를 생성하여 @Controller 어노테이션을 사용하여 @RequsetMapping을 하여 testView를 return한다.
        (여기서 testView는 Thymeleaf를 사용하기 위한 html 파일의 이름이며 html을 반환하는 것으로 @RestController가 아닌 @Controller를 사용한다.) (사진 6, 7번)

        하지만 사진 8번과 같은 에러 발생
            org.thymeleaf.exceptions.TemplateInputException는 타임리프 문법을 잘못 쓰는 등의 이유로 특정 url을 찾지 못하거나 파싱 에러가 나는 경우에 자주 나는 에러이다.

            application.yml 파일에서 타임리프의 prefix 설정에서 발생한 문제로 class:/templates/라 적혀있던 내용을 classpath:/templates/로 변경하면 된다.
            또한, mode: HTML5 에서도 에러가 발생하므로 mode: HTML로 수정한다.(사진 9번)

        문제를 해결하면 사진 10번과 같이 ${ }를 사용하여 변수를 호출한 것을 확인할 수 있다.

    - 객체 변수값 : *{} 사용하기
        model 폴더에서 Member.java를 생성하여 사진 10번과 같이 코드를 작성.(Member 객체에는 id, name, phone을 지정)
        앞서 만들었던 TestController.java에 Member 객체(id, name, phone)을 넣어 html로 출력할 수 있도록 작성.(사진 11번)

        testView.html에 Member 객체의 id, name, phone을 출력할 수 있도록 작성.(사진 12번)
            TestController.java에서 addAttribute()를 사용하여 결정한 addAttributeName이 member이므로 ${member}를 이용하여 하위에 존재하는 id, name, phone은 *{}으로 불러온다.(사진 13번)

            하지만 사진 14번과 같은 오류가 발생한다. 
            
            그 이유는 사진 15번과 같이 name, phone에 대해 return 값을 넣어주지 않았기 때문이다.

        코드를 모두 작성하고 확인해보면 사진 16번과 같이 출력된 값을 볼 수 있다.

    - 반복문 each
        Thymeleaf에서 사용하는 반복문은 for, while이 아닌 each이다. 먼저, 반복문을 돌린 객체를 만들기 위해 TestController.java에서 여러 데이터를 가지는 list를 작성한다.(사진 17번)
        다음으로 반복문을 실행할 html 파일을 생성한다.(사진 18번)
            TestController.java에서 선언한 addAttributeName의 memberList를 ${}으로 불러와 member에 담고, 그것을 이용하여 id, name, phone을 출력한다.

        결과를 확인해보면 사진 19번과 같이 반복문이 실행되어 출력되는 모습을 확인할 수 있다.

    - 조건문 if
        Thymeleaf에서 조건문은 if로 사용되지만, else의 경우에는 unless로 사용해야 한다.
        if 문을 사용할 때에는 java 파일을 수정할 필요 없이 html 파일에서만 작업을 실행해도 상관 없으며 사진 20번과 같이 일반적인 if 문과 비슷하게 쓰이지만, unless의 경우, if 문의 조건을 다시 한번 작성해야한다.

        코드를 작성하고 실행해보면 사진 21번과 같이 if 문이 작동되는 것을 볼 수 있다.